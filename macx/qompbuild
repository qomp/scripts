#!/bin/bash

#You may need to run next command in case you get build errors:
#sudo xcode-select -s /Applications/Xcode.app/

# Qt5 Settings
MAC_SDK_VER=10.14
QTDIR="${HOME}/Qt/5.15.2/clang_64"
FRAMEWORKS_DIR="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${MAC_SDK_VER}.sdk/System/Library/Frameworks"
QT_FRAMEWORKS_DIR="${QTDIR}/lib"
QT_TRANS_DIR="${QTDIR}/translations"
QT_PLUGINS_DIR="${QTDIR}/plugins"
QT_FRAMEWORKS="QtCore QtNetwork QtXml QtGui QtMultimedia QtMultimediaWidgets QtWidgets QtConcurrent QtPrintSupport QtOpenGL QtSvg QtDBus"
QT_FRAMEWORK_VERSION=5
QT_PLUGINS="audio/libqtaudio_coreaudio.dylib bearer/libqgenericbearer.dylib"
QT_PLUGINS="${QT_PLUGINS} platforms/libqcocoa.dylib printsupport/libcocoaprintersupport.dylib styles/libqmacstyle.dylib"
QT_PLUGINS="${QT_PLUGINS} mediaservice/libqtmedia_audioengine.dylib mediaservice/libqavfmediaplayer.dylib imageformats/libqgif.dylib imageformats/libqjpeg.dylib"
export QMAKESPEC="macx-clang"


# OPTIONS / НАСТРОЙКИ

# build and store directory / каталог для сорсов и сборки
QOMP_DIR="${HOME}/qomp-build"

QOMP_APP="qomp.app"

GROWL_URL="https://drive.google.com/uc?export=download&id=0B9THQ10qg_RSNWhuOW1rbV9WYmc"
GROWL_FILE="Growl-2.0.1"

TAG_URL="https://drive.google.com/uc?export=download&id=0B9THQ10qg_RSWU1aMEViaDBEd2c"
TAG_FILE="taglib-1.11.1"
TAG_VER="1.17.0"

CUE_URL="https://drive.google.com/uc?export=download&id=0B9THQ10qg_RSQjFWa0ZtdHI5Wk0"
CUE_FILE="libcue-2.1.0"
CUE_PATH=${QOMP_DIR}/libcue

# official repository
GIT_REPO="https://github.com/qomp/qomp.git"


export PATH="$QTDIR/bin:$PATH"

#######################
# FUNCTIONS / ФУНКЦИИ #
#######################
# Exit with error message
die() { echo; echo " !!!ERROR: $@"; exit 1; }
warning() { echo; echo " !!!WARNING: $@"; }
log() { echo -e "\033[1m*** $@ \033[0m"; }

check_env() {
	log "Testing environment..."

	MAKEOPT=${MAKEOPT:--j$((`sysctl -n hw.ncpu`+1)) -s}
	STAT_USER_ID='stat -f %u'
	STAT_USER_NAME='stat -f %Su'
	SED_INPLACE_ARG=".bak"

	v=`git --version 2>/dev/null` || \
		die "You should install Git first. / Сначала установите Git (http://git-scm.com/download)"

	# Make
	if [ ! -f "${MAKE}" ]; then
		MAKE=""
		for gn in gmake make; do
			[ -n "`$gn --version 2>/dev/null`" ] && { MAKE="$gn"; break; }
		done
		[ -z "${MAKE}" ] && die "You should install GNU Make first / "\
			"Сначала установите GNU Make"
	fi
	log "\tFound make tool: ${MAKE}"

	find_qt_util() {
		local name=$1
		result=""
		for un in $QTDIR/bin/$name $QTDIR/bin/$name-qt4 $QTDIR/bin/qt4-${name} $QTDIR/bin/${name}4; do
			[ -n "`$un -v 2>&1 |grep Qt`" ] && { result="$un"; break; }
		done
		if [ -z "${result}" ]; then
			[ "$nonfatal" = 1 ] || die "You should install $name util as part of"\
				"Qt framework / Сначала установите утилиту $name из Qt framework"
			log "${name} Qt tool is not found. ignoring.."
		else
			log "\tFound ${name} Qt tool: ${result}"
		fi
	}

	local result
	# qmake
	find_qt_util qmake; QMAKE="${result}"
	find_qt_util macdeployqt; MACDEPLOYQT="${result}"
	nonfatal=1 find_qt_util lrelease; LRELEASE="${result}"
	log "Environment is OK"
}

cleanup_framework() {
	# remove dev stuff
	rm -rf $1/Headers
	rm -f $1/${2}_debug
	rm -f $1/${2}_debug.prl
	rm -rf $1/Versions/$3/Headers
	rm -f $1/Versions/$3/${2}_debug
	rm -f $1/Versions/$3/${2}_debug.prl
}

prepare_workspace() {
	log "Init directories..."
	if [ ! -d "${QOMP_DIR}" ]
	then
		mkdir "${QOMP_DIR}" || die "can't create work directory ${QOMP_DIR}"	
	fi

	if [ ! -d "${QOMP_DIR}/qomp" ]
	then
		fetch_sources
	fi

	rm -rf "${QOMP_DIR}"/build

	[ -d "${QOMP_DIR}"/build ] && die "can't delete old build directory ${QOMP_DIR}/build"
	mkdir "${QOMP_DIR}"/build || die "can't create build directory ${QOMP_DIR}/build"
	log "\tCreated base directory structure"

	cd "${QOMP_DIR}"
	get_framework $GROWL_URL $GROWL_FILE $FRAMEWORKS_DIR Growl.framework
	get_framework $TAG_URL $TAG_FILE $FRAMEWORKS_DIR tag.framework
	get_framework $CUE_URL $CUE_FILE
}

get_framework() {
	get_url=$1
	file_name=$2	

	if [ ! -f $file_name.tar.bz2 ]; then
		log "Downloading $file_name"
		curl -L -o $file_name.tar.bz2 $get_url || die "can't download url $get_url"
		log "Extracting $file_name"
		tar jxvf $file_name.tar.bz2 2>/dev/null || die "can't extract file $file_name"
	fi

	if [ -n "$3" ]; then
		des_path=$3
		des_file=$4
		
		if [ ! -d $des_path/$des_file ]; then
			echo "We need admin password for copying $file_name framework"
			sudo cp -a $des_file $des_path
		fi
	fi
}

fetch_sources() {
	log "Fetch sources..."
	cd "${QOMP_DIR}"
	git clone ${GIT_REPO}
	cd qomp
	git submodule init
	git submodule update

	cd "${QOMP_DIR}"
}

prepare_sources() {
	log "Exporting sources..."

	cd "${QOMP_DIR}"/qomp
	git pull
	git submodule init
	git submodule update

	cd "${QOMP_DIR}"
	cp -a "qomp/" "build/"
}

src_compile() {
	log "All ready. Now run make..."
	cd "${QOMP_DIR}"/build
	if [ ! -z "${MAC_SDK_VER}" ]; then
		echo "QMAKE_MAC_SDK = macosx${MAC_SDK_VER}" >> conf.pri
	fi
	
	$QMAKE "CONFIG+=release" "CUE_PATH=${CUE_PATH}"	

	$MAKE $MAKEOPT || die "make failed"
}

copy_resources() {	
	cd "${QOMP_DIR}"/build/bin
	plugins=`ls plugins | grep ".dylib"`

	MORE_FRAMEWORKS="Growl tag"

	contentsdir=${QOMP_APP}/Contents
	mkdir "$contentsdir/Frameworks"	

	for f in $QT_FRAMEWORKS; do
		cp -a ${QT_FRAMEWORKS_DIR}/$f.framework $contentsdir/Frameworks
		cleanup_framework $contentsdir/Frameworks/$f.framework $f ${QT_FRAMEWORK_VERSION}
	done

	for p in $QT_PLUGINS; do
		mkdir -p $contentsdir/PlugIns/$(dirname $p);
		cp -a $QT_PLUGINS_DIR/$p $contentsdir/PlugIns/$p
	done

	qt_conf_file="$contentsdir/Resources/qt.conf"
	touch ${qt_conf_file}
	echo "[Paths]" >> ${qt_conf_file}
	echo "Plugins = PlugIns" >> ${qt_conf_file}

	cp -f "./libqomp.1.0.0.dylib" "$contentsdir/Frameworks/libqomp.1.dylib"
	install_name_tool -change "libqomp.1.dylib" "@executable_path/../Frameworks/libqomp.1.dylib" "$contentsdir/MacOS/qomp"
	install_name_tool -id @executable_path/../Frameworks/libqomp.1.dylib $contentsdir/Frameworks/libqomp.1.dylib
#	install_name_tool -add_rpath "@executable_path/../Frameworks"  "$contentsdir/MacOS/qomp"

	for m in $MORE_FRAMEWORKS; do
		cp -a "${FRAMEWORKS_DIR}/${m}.framework" "$contentsdir/Frameworks"
	done

	cleanup_framework "$contentsdir/Frameworks/Growl.framework" Growl A 
	cleanup_framework "$contentsdir/Frameworks/tag.framework" tag ${TAG_VER}
#	install_name_tool -id "@executable_path/../Frameworks/Growl.framework/Versions/A/Growl" "$contentsdir/Frameworks/Growl.framework/Growl"
#	install_name_tool -id "@executable_path/../Frameworks/tag.framework/Versions/${TAG_VER}/tag" "$contentsdir/Frameworks/tag.framework/tag"
		
	cp -f "${CUE_PATH}/lib/libcue.dylib" "$contentsdir/Frameworks/libcue.2.dylib"
	install_name_tool -id @executable_path/../Frameworks/libcue.2.dylib $contentsdir/Frameworks/libcue.2.dylib

	app_bundle_plugins_dir="$contentsdir/Resources/plugins"
	mkdir "$app_bundle_plugins_dir"
	for p in ${plugins}; do
		cp -f plugins/$p "$app_bundle_plugins_dir"/$p
		install_name_tool -change "libqomp.1.dylib" "@executable_path/../Frameworks/libqomp.1.dylib" "$app_bundle_plugins_dir/$p"
		install_name_tool -change "libcue.2.dylib" "@executable_path/../Frameworks/libcue.2.dylib" "$app_bundle_plugins_dir/$p"

#		for m in $MORE_FRAMEWORKS; do
#			install_name_tool -change "${FRAMEWORKS_DIR}/${m}.framework" "@executable_path/../Frameworks/${m}.framework" "$app_bundle_plugins_dir/$p"
#		done
		
#		install_name_tool -change "/usr/lib/tag.framework/Versions/${TAG_VER}/tag" "@executable_path/../Frameworks/tag.framework/Versions/${TAG_VER}/tag" "$app_bundle_plugins_dir/$p"
	done

	app_bundl_tr_dir="$contentsdir/Translations"
	tr_dir="${QOMP_DIR}/build/translations/translations"
	mkdir "$app_bundl_tr_dir"
	transl=`ls ${tr_dir} | grep ".qm"`
	for t in $transl; do
		cp -f ${tr_dir}/$t "$app_bundl_tr_dir/$t"
		substr=`echo ${t} | cut -d'_' -f 2`
		qt_tr=`ls ${QT_TRANS_DIR} | grep "^qt.*_${substr}"`
		log "Copy qt translations files for ${substr}:  $qt_tr..."
		for qtrl in $qt_tr; do
			cp -f "${QT_TRANS_DIR}/${qtrl}" "$app_bundl_tr_dir"
		done
	done

	themes_bundl_dir="$contentsdir/Themes"
	mkdir "$themes_bundl_dir"
	cp -f "${QOMP_DIR}/build/themes/themes.rcc" "$themes_bundl_dir"

	cp -f "${QOMP_DIR}/build/src/icons/qomp-file.icns" "$contentsdir/Resources"
}

make_bundle() {
	log "Making standalone bundle..."

	VOLUME_NAME="qomp"
	WC_DMG=wc.dmg
	WC_DIR=wc
	TEMPLATE_DMG=template.dmg
	MASTER_DMG="qomp.dmg"

	cd ${QOMP_DIR}/build/bin

	# generate empty template
	mkdir template
	hdiutil create -size 60m "$TEMPLATE_DMG" -srcfolder template -format UDRW -volname "$VOLUME_NAME" -quiet
	rmdir template

	cp $TEMPLATE_DMG $WC_DMG

	mkdir -p $WC_DIR
	hdiutil attach "$WC_DMG" -noautoopen -quiet -mountpoint "$WC_DIR"
	cp -a $QOMP_APP $WC_DIR
	diskutil eject `diskutil list | grep "$VOLUME_NAME" | grep "Apple_HFS" | awk '{print $6}'`

	rm -f $MASTER_DMG
	hdiutil convert "$WC_DMG" -quiet -format UDZO -imagekey zlib-level=9 -o $MASTER_DMG
	rm -rf $WC_DIR $WC_DMG
	hdiutil internet-enable -yes -quiet $MASTER_DMG || true


#	$MACDEPLOYQT ${QOMP_APP} -dmg	
	regex='#define APPLICATION_VERSION "(.+)"$'
	ver=`cat ${QOMP_DIR}/qomp/libqomp/src/defines.h | grep -E "$regex"`
	[[ $ver =~ $regex ]]
    		ver=`echo "${BASH_REMATCH[1]}" | tr " " "-"`
	cp -f $MASTER_DMG "${QOMP_DIR}/qomp-${ver}-mac.dmg"
}


#############
# Go Go Go! #
#############

starttime=`date "+Start time: %H:%M:%S"`
check_env
prepare_workspace
prepare_sources
src_compile

copy_resources
make_bundle

finishtime=`date "+Finish time: %H:%M:%S"`
echo $starttime
echo $finishtime
